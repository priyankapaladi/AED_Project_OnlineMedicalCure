/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DoctorRole;

import Business.EcoSystem;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import Logging.LogReports;
import PDFCreation.JavaPdf;
import java.awt.CardLayout;
import java.awt.Desktop;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.PharmacyRole.PharmacyProcessWorkRequestJPanel;

/**
 *
 * @author raunak
 */
public class DoctorWorkAreaPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private DoctorOrganization doctorOrganization;
    
    
    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    private BufferedImage image;

    LogReports doctorLog = new LogReports();

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        g.drawImage(image, 0, 0,this.getWidth(), this.getHeight(), null); // see javadoc for more info on the parameters            
    }
    
    public DoctorWorkAreaPanel(JPanel userProcessContainer, UserAccount account, Organization organization, EcoSystem business) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.doctorOrganization = (DoctorOrganization)organization;
        
        populateTable();
             try {                
          image = ImageIO.read(new File("F:\\doctor.jpg"));
       
       } catch (IOException ex) {
            // handle exception...
                    System.out.println("Exception:" + ex);
       }
             doctorLog.logUserData("The user with Username "+account.getUsername() +" logged in.", account.getUsername());
             doctorNameLabel.setText(userAccount.getUsername());
    }
    
    
    public void graphReport(){
        
    }
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : doctorOrganization.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[5];
            row[0] = request;
            row[1] = request.getSender().getEmployee().getName();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[3] = request.getStatus();
            row[4] = ((LabTestWorkRequest)request).getRequestId();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        processJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        doctorNameLabel = new javax.swing.JLabel();
        openBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 153, 0));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setBackground(new java.awt.Color(255, 153, 0));
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Sender", "Receiver", "Status", "RequestID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 67, 620, 290));

        processJButton.setBackground(new java.awt.Color(0, 0, 0));
        processJButton.setForeground(new java.awt.Color(255, 255, 255));
        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 180, 190, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Welcome Doctor");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, -1, -1));

        doctorNameLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        doctorNameLabel.setText("Doctor's Name");
        add(doctorNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 20, -1, -1));

        openBtn.setBackground(new java.awt.Color(0, 0, 0));
        openBtn.setForeground(new java.awt.Color(255, 255, 255));
        openBtn.setText("Open and Review");
        openBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBtnActionPerformed(evt);
            }
        });
        add(openBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 100, 190, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
    
        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            
            JOptionPane.showConfirmDialog(null, "Please select a row!");
            return;
            
        }
        
        // Assigning it to the doctor
        WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        if(request.getStatus().equalsIgnoreCase("Completed")){
          int choice = JOptionPane.showConfirmDialog(null, "The prescription has already been mailed! Do you wanna re-send?", "No, don't mail", JOptionPane.INFORMATION_MESSAGE);
        
        switch (choice) {
            case JOptionPane.NO_OPTION:
                
                break;
            case JOptionPane.YES_OPTION:
                 request.setReceiver(userAccount);
        
        
        request.setStatus("Pending");
        populateTable();
        
         

        // Processing
        LabTestWorkRequest labRequest = (LabTestWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        System.out.println("request completed--"+labRequest.getStatus());
       
        labRequest.setStatus("Processing");
    
    
        ProcessWorkRequestJPanel processWorkRequestJPanel = new ProcessWorkRequestJPanel(userProcessContainer, labRequest);
        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        request.setReceiver(userAccount);
        
        
        request.setStatus("Pending");
       
                break;
            case JOptionPane.CANCEL_OPTION:
                break;
            case JOptionPane.CLOSED_OPTION:
                break;
            default:
                break;
        } 
        }
         request.setReceiver(userAccount);
        
        
        request.setStatus("Pending");
        populateTable();
        
         LabTestWorkRequest labRequest = (LabTestWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        System.out.println("request completed--"+labRequest.getStatus());
       
        labRequest.setStatus("Processing");
        
        ProcessWorkRequestJPanel processWorkRequestJPanel = new ProcessWorkRequestJPanel(userProcessContainer, labRequest);
        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
      
        
        
    }//GEN-LAST:event_processJButtonActionPerformed

    private void openBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBtnActionPerformed
        // TODO add your handling code here:
          int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            
            JOptionPane.showConfirmDialog(null, "Please select a row!");
            return;
            
        }
         LabTestWorkRequest labRequest = (LabTestWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
         if(!labRequest.getStatus().equalsIgnoreCase("completed")){
             JOptionPane.showMessageDialog(null, "No prescription has been sent yet!");
             return;
             
         }
         Desktop desktop = Desktop.getDesktop();
        System.out.println("location"+"F:/"+labRequest.getPatientName()+"/"+labRequest.getRequestId());
        File file = new File("F:/"+labRequest.getPatientName()+"/"+labRequest.getRequestId());
        try {
            desktop.open(file);
        } catch (IOException ex) {
            Logger.getLogger(PharmacyProcessWorkRequestJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }//GEN-LAST:event_openBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel doctorNameLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton openBtn;
    private javax.swing.JButton processJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
